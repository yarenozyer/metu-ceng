#yaren buse Ã¶zyer 
#2448785

# Execution begins at address 0 
.pos 0
init:
    irmovq stack, %rsp      # Set up stack pointer
    irmovq root, %rdi   #root to first argument
    irmovq k, %rsi  #k = 8
    call main       # Execute main program
    halt            # Terminate program 

# nodes
    .pos 0x200
    root:
    .quad 17
    .quad node6
    .quad node24
    node6:
    .quad 6
    .quad node4
    .quad node11
    node4:
    .quad 4
    .quad node3
    .quad node5
    node3:
    .quad 3
    .quad 0
    .quad 0
    node5:
    .quad 5
    .quad 0 # Remember that 0 is null.
    .quad 0
    node11:
    .quad 11
    .quad node8
    .quad 0
    node8:
    .quad 8
    .quad 0
    .quad 0
    node24:
    .quad 24
    .quad node19
    .quad node40
    node19:
    .quad 19
    .quad 0
    .quad 0
    node40:
    .quad 40
    .quad 0
    .quad node52
    node52:
    .quad 52
    .quad 0
    .quad 0
    
k:
    .quad 8



    
main:   
    call kth_bst
    ret
    
kth_bst:
    andq %rdi, %rdi
    je failed
    
func:
    pushq %rdi #push rdi to stack
    mrmovq 8(%rdi), %rdi #root->left to first argument 
    call kth_bst
    popq %rdx #get root
    rrmovq %rdx, %rdi #move root to %rdi for easy computation
    mrmovq (%rsi), %r8 #copy k to compare
    irmovq $0, %r9 #literal 0
    subq %r8, %r9 #subtract k from 0, if result is positive it failed
    jge else
    mrmovq  (%rsi), %r8 #move *k to r9
    irmovq $1, %r9 #literal 1
    subq %r9, %r8 #k--
    rmmovq %r8, (%rsi) #move k-- to k
    mrmovq  (%rsi), %r8 #move *k to r8
    andq %r8, %r8 #check if *k is zero
    je final
    mrmovq 16(%rdi), %rdi #root->right to first argument
    call kth_bst
    ret
    #return call kth_bst with root->right
    
    
#return root->data
failed:
    irmovq $-1, %rax #rax = -1 for return
    ret


final:
    
    mrmovq (%rdi), %rax #return root->data
    pushq %rax
    ret
    
    
    
else:
    popq %rax
    #mrmovq (%rax), %rax
    ret
    
  
    
.pos 0x800   
    stack:


    
